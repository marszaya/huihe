// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "user.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_user_2eproto() {
  delete Account::default_instance_;
  delete User::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_user_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_user_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::protobuf_AddDesc_common_2eproto();
  ::protobuf_AddDesc_item_2eproto();
  ::protobuf_AddDesc_role_2eproto();
  ::protobuf_AddDesc_pve_2eproto();
  Account::default_instance_ = new Account();
  User::default_instance_ = new User();
  Account::default_instance_->InitAsDefaultInstance();
  User::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_user_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_user_2eproto_once_);
void protobuf_AddDesc_user_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_user_2eproto_once_,
                 &protobuf_AddDesc_user_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_user_2eproto {
  StaticDescriptorInitializer_user_2eproto() {
    protobuf_AddDesc_user_2eproto();
  }
} static_descriptor_initializer_user_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int Account::kGoldFieldNumber;
const int Account::kMoneyFieldNumber;
const int Account::kExprFieldNumber;
const int Account::kVipFieldNumber;
#endif  // !_MSC_VER

Account::Account()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Account::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  expr_ = const_cast< ::Experience*>(
      ::Experience::internal_default_instance());
#else
  expr_ = const_cast< ::Experience*>(&::Experience::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  vip_ = const_cast< ::Experience*>(
      ::Experience::internal_default_instance());
#else
  vip_ = const_cast< ::Experience*>(&::Experience::default_instance());
#endif
}

Account::Account(const Account& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Account::SharedCtor() {
  _cached_size_ = 0;
  gold_ = GOOGLE_LONGLONG(0);
  money_ = GOOGLE_LONGLONG(0);
  expr_ = NULL;
  vip_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Account::~Account() {
  SharedDtor();
}

void Account::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete expr_;
    delete vip_;
  }
}

void Account::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Account& Account::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

Account* Account::default_instance_ = NULL;

Account* Account::New() const {
  return new Account;
}

void Account::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gold_ = GOOGLE_LONGLONG(0);
    money_ = GOOGLE_LONGLONG(0);
    if (has_expr()) {
      if (expr_ != NULL) expr_->::Experience::Clear();
    }
    if (has_vip()) {
      if (vip_ != NULL) vip_->::Experience::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Account::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 gold = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_money;
        break;
      }

      // optional int64 money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_expr;
        break;
      }

      // optional .Experience expr = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_expr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_expr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_vip;
        break;
      }

      // optional .Experience vip = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Account::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 gold = 2;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->gold(), output);
  }

  // optional int64 money = 3;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->money(), output);
  }

  // optional .Experience expr = 4;
  if (has_expr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->expr(), output);
  }

  // optional .Experience vip = 5;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->vip(), output);
  }

}

int Account::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 gold = 2;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gold());
    }

    // optional int64 money = 3;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->money());
    }

    // optional .Experience expr = 4;
    if (has_expr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->expr());
    }

    // optional .Experience vip = 5;
    if (has_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vip());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Account::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Account*>(&from));
}

void Account::MergeFrom(const Account& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_expr()) {
      mutable_expr()->::Experience::MergeFrom(from.expr());
    }
    if (from.has_vip()) {
      mutable_vip()->::Experience::MergeFrom(from.vip());
    }
  }
}

void Account::CopyFrom(const Account& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Account::IsInitialized() const {

  return true;
}

void Account::Swap(Account* other) {
  if (other != this) {
    std::swap(gold_, other->gold_);
    std::swap(money_, other->money_);
    std::swap(expr_, other->expr_);
    std::swap(vip_, other->vip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Account::GetTypeName() const {
  return "Account";
}


// ===================================================================

#ifndef _MSC_VER
const int User::kIdFieldNumber;
const int User::kAccountFieldNumber;
const int User::kRoleFieldNumber;
const int User::kItemFieldNumber;
const int User::kPveFieldNumber;
const int User::kVersionFieldNumber;
#endif  // !_MSC_VER

User::User()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void User::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  id_ = const_cast< ::Identity*>(
      ::Identity::internal_default_instance());
#else
  id_ = const_cast< ::Identity*>(&::Identity::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  account_ = const_cast< ::Account*>(
      ::Account::internal_default_instance());
#else
  account_ = const_cast< ::Account*>(&::Account::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  role_ = const_cast< ::RoleSet*>(
      ::RoleSet::internal_default_instance());
#else
  role_ = const_cast< ::RoleSet*>(&::RoleSet::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  item_ = const_cast< ::ItemSet*>(
      ::ItemSet::internal_default_instance());
#else
  item_ = const_cast< ::ItemSet*>(&::ItemSet::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  pve_ = const_cast< ::PveInfo*>(
      ::PveInfo::internal_default_instance());
#else
  pve_ = const_cast< ::PveInfo*>(&::PveInfo::default_instance());
#endif
}

User::User(const User& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void User::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  account_ = NULL;
  role_ = NULL;
  item_ = NULL;
  pve_ = NULL;
  version_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

User::~User() {
  SharedDtor();
}

void User::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete id_;
    delete account_;
    delete role_;
    delete item_;
    delete pve_;
  }
}

void User::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const User& User::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

User* User::default_instance_ = NULL;

User* User::New() const {
  return new User;
}

void User::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != NULL) id_->::Identity::Clear();
    }
    if (has_account()) {
      if (account_ != NULL) account_->::Account::Clear();
    }
    if (has_role()) {
      if (role_ != NULL) role_->::RoleSet::Clear();
    }
    if (has_item()) {
      if (item_ != NULL) item_->::ItemSet::Clear();
    }
    if (has_pve()) {
      if (pve_ != NULL) pve_->::PveInfo::Clear();
    }
    version_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Identity id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional .Account account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_role;
        break;
      }

      // optional .RoleSet role = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_item;
        break;
      }

      // optional .ItemSet item = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_pve;
        break;
      }

      // optional .PveInfo pve = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pve:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pve()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(800)) goto parse_version;
        break;
      }

      // optional int32 version = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Identity id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->id(), output);
  }

  // optional .Account account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->account(), output);
  }

  // optional .RoleSet role = 3;
  if (has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->role(), output);
  }

  // optional .ItemSet item = 4;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->item(), output);
  }

  // optional .PveInfo pve = 5;
  if (has_pve()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->pve(), output);
  }

  // optional int32 version = 100;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(100, this->version(), output);
  }

}

int User::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Identity id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }

    // optional .Account account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->account());
    }

    // optional .RoleSet role = 3;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role());
    }

    // optional .ItemSet item = 4;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }

    // optional .PveInfo pve = 5;
    if (has_pve()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pve());
    }

    // optional int32 version = 100;
    if (has_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void User::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const User*>(&from));
}

void User::MergeFrom(const User& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::Identity::MergeFrom(from.id());
    }
    if (from.has_account()) {
      mutable_account()->::Account::MergeFrom(from.account());
    }
    if (from.has_role()) {
      mutable_role()->::RoleSet::MergeFrom(from.role());
    }
    if (from.has_item()) {
      mutable_item()->::ItemSet::MergeFrom(from.item());
    }
    if (from.has_pve()) {
      mutable_pve()->::PveInfo::MergeFrom(from.pve());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
}

void User::CopyFrom(const User& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User::IsInitialized() const {

  return true;
}

void User::Swap(User* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(account_, other->account_);
    std::swap(role_, other->role_);
    std::swap(item_, other->item_);
    std::swap(pve_, other->pve_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string User::GetTypeName() const {
  return "User";
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
