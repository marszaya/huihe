// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: role.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "role.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_role_2eproto() {
  delete Equip::default_instance_;
  delete BattleSkill::default_instance_;
  delete BattleAttr::default_instance_;
  delete Role::default_instance_;
  delete RoleSet::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_role_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_role_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::protobuf_AddDesc_common_2eproto();
  ::protobuf_AddDesc_item_2eproto();
  Equip::default_instance_ = new Equip();
  BattleSkill::default_instance_ = new BattleSkill();
  BattleAttr::default_instance_ = new BattleAttr();
  Role::default_instance_ = new Role();
  RoleSet::default_instance_ = new RoleSet();
  Equip::default_instance_->InitAsDefaultInstance();
  BattleSkill::default_instance_->InitAsDefaultInstance();
  BattleAttr::default_instance_->InitAsDefaultInstance();
  Role::default_instance_->InitAsDefaultInstance();
  RoleSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_role_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_role_2eproto_once_);
void protobuf_AddDesc_role_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_role_2eproto_once_,
                 &protobuf_AddDesc_role_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_role_2eproto {
  StaticDescriptorInitializer_role_2eproto() {
    protobuf_AddDesc_role_2eproto();
  }
} static_descriptor_initializer_role_2eproto_;
#endif

// ===================================================================

bool Equip_POSITION_IDX_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Equip_POSITION_IDX Equip::HELMET;
const Equip_POSITION_IDX Equip::ARMOR;
const Equip_POSITION_IDX Equip::WEAPON;
const Equip_POSITION_IDX Equip::AMULET;
const Equip_POSITION_IDX Equip::END;
const Equip_POSITION_IDX Equip::POSITION_IDX_MIN;
const Equip_POSITION_IDX Equip::POSITION_IDX_MAX;
const int Equip::POSITION_IDX_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Equip::kItemsFieldNumber;
#endif  // !_MSC_VER

Equip::Equip()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Equip::InitAsDefaultInstance() {
}

Equip::Equip(const Equip& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Equip::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Equip::~Equip() {
  SharedDtor();
}

void Equip::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Equip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Equip& Equip::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_role_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_role_2eproto();
#endif
  return *default_instance_;
}

Equip* Equip::default_instance_ = NULL;

Equip* Equip::New() const {
  return new Equip;
}

void Equip::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Equip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Item items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Equip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Item items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->items(i), output);
  }

}

int Equip::ByteSize() const {
  int total_size = 0;

  // repeated .Item items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Equip::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Equip*>(&from));
}

void Equip::MergeFrom(const Equip& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
}

void Equip::CopyFrom(const Equip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Equip::IsInitialized() const {

  return true;
}

void Equip::Swap(Equip* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Equip::GetTypeName() const {
  return "Equip";
}


// ===================================================================

bool BattleSkill_SKILL_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BattleSkill_SKILL_TYPE BattleSkill::PHYSICAL_DAMAGE;
const BattleSkill_SKILL_TYPE BattleSkill::SKILL_TYPE_MIN;
const BattleSkill_SKILL_TYPE BattleSkill::SKILL_TYPE_MAX;
const int BattleSkill::SKILL_TYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BattleSkill::kIdsFieldNumber;
#endif  // !_MSC_VER

BattleSkill::BattleSkill()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void BattleSkill::InitAsDefaultInstance() {
}

BattleSkill::BattleSkill(const BattleSkill& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void BattleSkill::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleSkill::~BattleSkill() {
  SharedDtor();
}

void BattleSkill::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void BattleSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BattleSkill& BattleSkill::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_role_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_role_2eproto();
#endif
  return *default_instance_;
}

BattleSkill* BattleSkill::default_instance_ = NULL;

BattleSkill* BattleSkill::New() const {
  return new BattleSkill;
}

void BattleSkill::Clear() {
  ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool BattleSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 ids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 ids = 1;
  for (int i = 0; i < this->ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->ids(i), output);
  }

}

int BattleSkill::ByteSize() const {
  int total_size = 0;

  // repeated int32 ids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ids(i));
    }
    total_size += 1 * this->ids_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleSkill::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BattleSkill*>(&from));
}

void BattleSkill::MergeFrom(const BattleSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  ids_.MergeFrom(from.ids_);
}

void BattleSkill::CopyFrom(const BattleSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleSkill::IsInitialized() const {

  return true;
}

void BattleSkill::Swap(BattleSkill* other) {
  if (other != this) {
    ids_.Swap(&other->ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BattleSkill::GetTypeName() const {
  return "BattleSkill";
}


// ===================================================================

#ifndef _MSC_VER
const int BattleAttr::kHpFieldNumber;
const int BattleAttr::kAdFieldNumber;
const int BattleAttr::kApFieldNumber;
const int BattleAttr::kArmFieldNumber;
const int BattleAttr::kMrFieldNumber;
const int BattleAttr::kMsFieldNumber;
const int BattleAttr::kAsFieldNumber;
const int BattleAttr::kCrFieldNumber;
const int BattleAttr::kHrFieldNumber;
const int BattleAttr::kDrFieldNumber;
const int BattleAttr::kArmigvFieldNumber;
const int BattleAttr::kArmigrFieldNumber;
const int BattleAttr::kMrigvFieldNumber;
const int BattleAttr::kMrigrFieldNumber;
const int BattleAttr::kEnergyFieldNumber;
#endif  // !_MSC_VER

BattleAttr::BattleAttr()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void BattleAttr::InitAsDefaultInstance() {
}

BattleAttr::BattleAttr(const BattleAttr& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void BattleAttr::SharedCtor() {
  _cached_size_ = 0;
  hp_ = 0;
  ad_ = 0;
  ap_ = 0;
  arm_ = 0;
  mr_ = 0;
  ms_ = 0;
  as_ = 0;
  cr_ = 0;
  hr_ = 0;
  dr_ = 0;
  armigv_ = 0;
  armigr_ = 0;
  mrigv_ = 0;
  mrigr_ = 0;
  energy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleAttr::~BattleAttr() {
  SharedDtor();
}

void BattleAttr::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void BattleAttr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BattleAttr& BattleAttr::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_role_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_role_2eproto();
#endif
  return *default_instance_;
}

BattleAttr* BattleAttr::default_instance_ = NULL;

BattleAttr* BattleAttr::New() const {
  return new BattleAttr;
}

void BattleAttr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hp_ = 0;
    ad_ = 0;
    ap_ = 0;
    arm_ = 0;
    mr_ = 0;
    ms_ = 0;
    as_ = 0;
    cr_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    hr_ = 0;
    dr_ = 0;
    armigv_ = 0;
    armigr_ = 0;
    mrigv_ = 0;
    mrigr_ = 0;
    energy_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool BattleAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 hp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ad;
        break;
      }

      // optional int32 ad = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ad_)));
          set_has_ad();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ap;
        break;
      }

      // optional int32 ap = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ap_)));
          set_has_ap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_arm;
        break;
      }

      // optional int32 arm = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arm_)));
          set_has_arm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_mr;
        break;
      }

      // optional int32 mr = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mr_)));
          set_has_mr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ms;
        break;
      }

      // optional int32 ms = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ms_)));
          set_has_ms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_as;
        break;
      }

      // optional int32 as = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_as:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &as_)));
          set_has_as();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_cr;
        break;
      }

      // optional int32 cr = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cr_)));
          set_has_cr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_hr;
        break;
      }

      // optional int32 hr = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hr_)));
          set_has_hr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_dr;
        break;
      }

      // optional int32 dr = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dr_)));
          set_has_dr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_armigv;
        break;
      }

      // optional int32 armigv = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_armigv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &armigv_)));
          set_has_armigv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_armigr;
        break;
      }

      // optional int32 armigr = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_armigr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &armigr_)));
          set_has_armigr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_mrigv;
        break;
      }

      // optional int32 mrigv = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mrigv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mrigv_)));
          set_has_mrigv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_mrigr;
        break;
      }

      // optional int32 mrigr = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mrigr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mrigr_)));
          set_has_mrigr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_energy;
        break;
      }

      // optional int32 energy = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_energy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &energy_)));
          set_has_energy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 hp = 1;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->hp(), output);
  }

  // optional int32 ad = 2;
  if (has_ad()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ad(), output);
  }

  // optional int32 ap = 3;
  if (has_ap()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ap(), output);
  }

  // optional int32 arm = 4;
  if (has_arm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->arm(), output);
  }

  // optional int32 mr = 5;
  if (has_mr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->mr(), output);
  }

  // optional int32 ms = 6;
  if (has_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ms(), output);
  }

  // optional int32 as = 7;
  if (has_as()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->as(), output);
  }

  // optional int32 cr = 8;
  if (has_cr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->cr(), output);
  }

  // optional int32 hr = 9;
  if (has_hr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->hr(), output);
  }

  // optional int32 dr = 10;
  if (has_dr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->dr(), output);
  }

  // optional int32 armigv = 11;
  if (has_armigv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->armigv(), output);
  }

  // optional int32 armigr = 12;
  if (has_armigr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->armigr(), output);
  }

  // optional int32 mrigv = 13;
  if (has_mrigv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->mrigv(), output);
  }

  // optional int32 mrigr = 14;
  if (has_mrigr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->mrigr(), output);
  }

  // optional int32 energy = 15;
  if (has_energy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->energy(), output);
  }

}

int BattleAttr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 hp = 1;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // optional int32 ad = 2;
    if (has_ad()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ad());
    }

    // optional int32 ap = 3;
    if (has_ap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ap());
    }

    // optional int32 arm = 4;
    if (has_arm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arm());
    }

    // optional int32 mr = 5;
    if (has_mr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mr());
    }

    // optional int32 ms = 6;
    if (has_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ms());
    }

    // optional int32 as = 7;
    if (has_as()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->as());
    }

    // optional int32 cr = 8;
    if (has_cr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cr());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 hr = 9;
    if (has_hr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hr());
    }

    // optional int32 dr = 10;
    if (has_dr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dr());
    }

    // optional int32 armigv = 11;
    if (has_armigv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->armigv());
    }

    // optional int32 armigr = 12;
    if (has_armigr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->armigr());
    }

    // optional int32 mrigv = 13;
    if (has_mrigv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mrigv());
    }

    // optional int32 mrigr = 14;
    if (has_mrigr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mrigr());
    }

    // optional int32 energy = 15;
    if (has_energy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->energy());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleAttr::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BattleAttr*>(&from));
}

void BattleAttr::MergeFrom(const BattleAttr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_ad()) {
      set_ad(from.ad());
    }
    if (from.has_ap()) {
      set_ap(from.ap());
    }
    if (from.has_arm()) {
      set_arm(from.arm());
    }
    if (from.has_mr()) {
      set_mr(from.mr());
    }
    if (from.has_ms()) {
      set_ms(from.ms());
    }
    if (from.has_as()) {
      set_as(from.as());
    }
    if (from.has_cr()) {
      set_cr(from.cr());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_hr()) {
      set_hr(from.hr());
    }
    if (from.has_dr()) {
      set_dr(from.dr());
    }
    if (from.has_armigv()) {
      set_armigv(from.armigv());
    }
    if (from.has_armigr()) {
      set_armigr(from.armigr());
    }
    if (from.has_mrigv()) {
      set_mrigv(from.mrigv());
    }
    if (from.has_mrigr()) {
      set_mrigr(from.mrigr());
    }
    if (from.has_energy()) {
      set_energy(from.energy());
    }
  }
}

void BattleAttr::CopyFrom(const BattleAttr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleAttr::IsInitialized() const {

  return true;
}

void BattleAttr::Swap(BattleAttr* other) {
  if (other != this) {
    std::swap(hp_, other->hp_);
    std::swap(ad_, other->ad_);
    std::swap(ap_, other->ap_);
    std::swap(arm_, other->arm_);
    std::swap(mr_, other->mr_);
    std::swap(ms_, other->ms_);
    std::swap(as_, other->as_);
    std::swap(cr_, other->cr_);
    std::swap(hr_, other->hr_);
    std::swap(dr_, other->dr_);
    std::swap(armigv_, other->armigv_);
    std::swap(armigr_, other->armigr_);
    std::swap(mrigv_, other->mrigv_);
    std::swap(mrigr_, other->mrigr_);
    std::swap(energy_, other->energy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BattleAttr::GetTypeName() const {
  return "BattleAttr";
}


// ===================================================================

#ifndef _MSC_VER
const int Role::kIdFieldNumber;
const int Role::kExprFieldNumber;
const int Role::kBattrFieldNumber;
const int Role::kIsmainFieldNumber;
const int Role::kShowtypeFieldNumber;
const int Role::kEquipFieldNumber;
const int Role::kSkillFieldNumber;
const int Role::kHireflagFieldNumber;
#endif  // !_MSC_VER

Role::Role()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Role::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  id_ = const_cast< ::Identity*>(
      ::Identity::internal_default_instance());
#else
  id_ = const_cast< ::Identity*>(&::Identity::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  expr_ = const_cast< ::Experience*>(
      ::Experience::internal_default_instance());
#else
  expr_ = const_cast< ::Experience*>(&::Experience::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  battr_ = const_cast< ::BattleAttr*>(
      ::BattleAttr::internal_default_instance());
#else
  battr_ = const_cast< ::BattleAttr*>(&::BattleAttr::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  equip_ = const_cast< ::Equip*>(
      ::Equip::internal_default_instance());
#else
  equip_ = const_cast< ::Equip*>(&::Equip::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  skill_ = const_cast< ::BattleSkill*>(
      ::BattleSkill::internal_default_instance());
#else
  skill_ = const_cast< ::BattleSkill*>(&::BattleSkill::default_instance());
#endif
}

Role::Role(const Role& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Role::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  expr_ = NULL;
  battr_ = NULL;
  ismain_ = 0;
  showtype_ = 0;
  equip_ = NULL;
  skill_ = NULL;
  hireflag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Role::~Role() {
  SharedDtor();
}

void Role::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete id_;
    delete expr_;
    delete battr_;
    delete equip_;
    delete skill_;
  }
}

void Role::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Role& Role::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_role_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_role_2eproto();
#endif
  return *default_instance_;
}

Role* Role::default_instance_ = NULL;

Role* Role::New() const {
  return new Role;
}

void Role::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != NULL) id_->::Identity::Clear();
    }
    if (has_expr()) {
      if (expr_ != NULL) expr_->::Experience::Clear();
    }
    if (has_battr()) {
      if (battr_ != NULL) battr_->::BattleAttr::Clear();
    }
    ismain_ = 0;
    showtype_ = 0;
    if (has_equip()) {
      if (equip_ != NULL) equip_->::Equip::Clear();
    }
    if (has_skill()) {
      if (skill_ != NULL) skill_->::BattleSkill::Clear();
    }
    hireflag_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Role::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Identity id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_expr;
        break;
      }

      // optional .Experience expr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_expr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_expr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_battr;
        break;
      }

      // optional .BattleAttr battr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ismain;
        break;
      }

      // optional int32 ismain = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ismain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ismain_)));
          set_has_ismain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_showtype;
        break;
      }

      // optional int32 showtype = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_showtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &showtype_)));
          set_has_showtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_equip;
        break;
      }

      // optional .Equip equip = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_skill;
        break;
      }

      // optional .BattleSkill skill = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(800)) goto parse_hireflag;
        break;
      }

      // optional int32 hireflag = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hireflag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hireflag_)));
          set_has_hireflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Role::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Identity id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->id(), output);
  }

  // optional .Experience expr = 2;
  if (has_expr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->expr(), output);
  }

  // optional .BattleAttr battr = 3;
  if (has_battr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->battr(), output);
  }

  // optional int32 ismain = 4;
  if (has_ismain()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ismain(), output);
  }

  // optional int32 showtype = 5;
  if (has_showtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->showtype(), output);
  }

  // optional .Equip equip = 6;
  if (has_equip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->equip(), output);
  }

  // optional .BattleSkill skill = 7;
  if (has_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->skill(), output);
  }

  // optional int32 hireflag = 100;
  if (has_hireflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(100, this->hireflag(), output);
  }

}

int Role::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Identity id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }

    // optional .Experience expr = 2;
    if (has_expr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->expr());
    }

    // optional .BattleAttr battr = 3;
    if (has_battr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battr());
    }

    // optional int32 ismain = 4;
    if (has_ismain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ismain());
    }

    // optional int32 showtype = 5;
    if (has_showtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->showtype());
    }

    // optional .Equip equip = 6;
    if (has_equip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equip());
    }

    // optional .BattleSkill skill = 7;
    if (has_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skill());
    }

    // optional int32 hireflag = 100;
    if (has_hireflag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hireflag());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Role::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Role*>(&from));
}

void Role::MergeFrom(const Role& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::Identity::MergeFrom(from.id());
    }
    if (from.has_expr()) {
      mutable_expr()->::Experience::MergeFrom(from.expr());
    }
    if (from.has_battr()) {
      mutable_battr()->::BattleAttr::MergeFrom(from.battr());
    }
    if (from.has_ismain()) {
      set_ismain(from.ismain());
    }
    if (from.has_showtype()) {
      set_showtype(from.showtype());
    }
    if (from.has_equip()) {
      mutable_equip()->::Equip::MergeFrom(from.equip());
    }
    if (from.has_skill()) {
      mutable_skill()->::BattleSkill::MergeFrom(from.skill());
    }
    if (from.has_hireflag()) {
      set_hireflag(from.hireflag());
    }
  }
}

void Role::CopyFrom(const Role& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Role::IsInitialized() const {

  return true;
}

void Role::Swap(Role* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(expr_, other->expr_);
    std::swap(battr_, other->battr_);
    std::swap(ismain_, other->ismain_);
    std::swap(showtype_, other->showtype_);
    std::swap(equip_, other->equip_);
    std::swap(skill_, other->skill_);
    std::swap(hireflag_, other->hireflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Role::GetTypeName() const {
  return "Role";
}


// ===================================================================

#ifndef _MSC_VER
const int RoleSet::kRolesFieldNumber;
const int RoleSet::kMainroleidxFieldNumber;
const int RoleSet::kBattlelistFieldNumber;
const int RoleSet::kBattlelistmaxFieldNumber;
const int RoleSet::kShopRolesFieldNumber;
const int RoleSet::kMaxidFieldNumber;
#endif  // !_MSC_VER

RoleSet::RoleSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RoleSet::InitAsDefaultInstance() {
}

RoleSet::RoleSet(const RoleSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RoleSet::SharedCtor() {
  _cached_size_ = 0;
  mainroleidx_ = 0;
  battlelistmax_ = 0;
  maxid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleSet::~RoleSet() {
  SharedDtor();
}

void RoleSet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RoleSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RoleSet& RoleSet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_role_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_role_2eproto();
#endif
  return *default_instance_;
}

RoleSet* RoleSet::default_instance_ = NULL;

RoleSet* RoleSet::New() const {
  return new RoleSet;
}

void RoleSet::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    mainroleidx_ = 0;
    battlelistmax_ = 0;
    maxid_ = 0;
  }
  roles_.Clear();
  battlelist_.Clear();
  shoproles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RoleSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Role roles = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_roles;
        if (input->ExpectTag(16)) goto parse_mainroleidx;
        break;
      }

      // optional int32 mainroleidx = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mainroleidx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mainroleidx_)));
          set_has_mainroleidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_battlelist;
        break;
      }

      // repeated .Identity battlelist = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battlelist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_battlelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_battlelist;
        if (input->ExpectTag(32)) goto parse_battlelistmax;
        break;
      }

      // optional int32 battlelistmax = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battlelistmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battlelistmax_)));
          set_has_battlelistmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_shopRoles;
        break;
      }

      // repeated .Role shopRoles = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shopRoles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shoproles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_shopRoles;
        if (input->ExpectTag(800)) goto parse_maxid;
        break;
      }

      // optional int32 maxid = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxid_)));
          set_has_maxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Role roles = 1;
  for (int i = 0; i < this->roles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->roles(i), output);
  }

  // optional int32 mainroleidx = 2;
  if (has_mainroleidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mainroleidx(), output);
  }

  // repeated .Identity battlelist = 3;
  for (int i = 0; i < this->battlelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->battlelist(i), output);
  }

  // optional int32 battlelistmax = 4;
  if (has_battlelistmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->battlelistmax(), output);
  }

  // repeated .Role shopRoles = 5;
  for (int i = 0; i < this->shoproles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->shoproles(i), output);
  }

  // optional int32 maxid = 100;
  if (has_maxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(100, this->maxid(), output);
  }

}

int RoleSet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 mainroleidx = 2;
    if (has_mainroleidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mainroleidx());
    }

    // optional int32 battlelistmax = 4;
    if (has_battlelistmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battlelistmax());
    }

    // optional int32 maxid = 100;
    if (has_maxid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxid());
    }

  }
  // repeated .Role roles = 1;
  total_size += 1 * this->roles_size();
  for (int i = 0; i < this->roles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roles(i));
  }

  // repeated .Identity battlelist = 3;
  total_size += 1 * this->battlelist_size();
  for (int i = 0; i < this->battlelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->battlelist(i));
  }

  // repeated .Role shopRoles = 5;
  total_size += 1 * this->shoproles_size();
  for (int i = 0; i < this->shoproles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shoproles(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RoleSet*>(&from));
}

void RoleSet::MergeFrom(const RoleSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  roles_.MergeFrom(from.roles_);
  battlelist_.MergeFrom(from.battlelist_);
  shoproles_.MergeFrom(from.shoproles_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_mainroleidx()) {
      set_mainroleidx(from.mainroleidx());
    }
    if (from.has_battlelistmax()) {
      set_battlelistmax(from.battlelistmax());
    }
    if (from.has_maxid()) {
      set_maxid(from.maxid());
    }
  }
}

void RoleSet::CopyFrom(const RoleSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleSet::IsInitialized() const {

  return true;
}

void RoleSet::Swap(RoleSet* other) {
  if (other != this) {
    roles_.Swap(&other->roles_);
    std::swap(mainroleidx_, other->mainroleidx_);
    battlelist_.Swap(&other->battlelist_);
    std::swap(battlelistmax_, other->battlelistmax_);
    shoproles_.Swap(&other->shoproles_);
    std::swap(maxid_, other->maxid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RoleSet::GetTypeName() const {
  return "RoleSet";
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
