// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: battlemsg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "battlemsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_battlemsg_2eproto() {
  delete BattleUnitIdxDef::default_instance_;
  delete BattleAction::default_instance_;
  delete BattleUnit::default_instance_;
  delete BattleTeam::default_instance_;
  delete BattleInitState::default_instance_;
  delete BattleInitBuff::default_instance_;
  delete BattleRound::default_instance_;
  delete BattleDetail::default_instance_;
  delete BattleResult::default_instance_;
  delete BattleRecord::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_battlemsg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_battlemsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::protobuf_AddDesc_role_2eproto();
  BattleUnitIdxDef::default_instance_ = new BattleUnitIdxDef();
  BattleAction::default_instance_ = new BattleAction();
  BattleUnit::default_instance_ = new BattleUnit();
  BattleTeam::default_instance_ = new BattleTeam();
  BattleInitState::default_instance_ = new BattleInitState();
  BattleInitBuff::default_instance_ = new BattleInitBuff();
  BattleRound::default_instance_ = new BattleRound();
  BattleDetail::default_instance_ = new BattleDetail();
  BattleResult::default_instance_ = new BattleResult();
  BattleRecord::default_instance_ = new BattleRecord();
  BattleUnitIdxDef::default_instance_->InitAsDefaultInstance();
  BattleAction::default_instance_->InitAsDefaultInstance();
  BattleUnit::default_instance_->InitAsDefaultInstance();
  BattleTeam::default_instance_->InitAsDefaultInstance();
  BattleInitState::default_instance_->InitAsDefaultInstance();
  BattleInitBuff::default_instance_->InitAsDefaultInstance();
  BattleRound::default_instance_->InitAsDefaultInstance();
  BattleDetail::default_instance_->InitAsDefaultInstance();
  BattleResult::default_instance_->InitAsDefaultInstance();
  BattleRecord::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_battlemsg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_battlemsg_2eproto_once_);
void protobuf_AddDesc_battlemsg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_battlemsg_2eproto_once_,
                 &protobuf_AddDesc_battlemsg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_battlemsg_2eproto {
  StaticDescriptorInitializer_battlemsg_2eproto() {
    protobuf_AddDesc_battlemsg_2eproto();
  }
} static_descriptor_initializer_battlemsg_2eproto_;
#endif

// ===================================================================

bool BattleUnitIdxDef_IdxDef_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 100:
    case 200:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BattleUnitIdxDef_IdxDef BattleUnitIdxDef::UNIT_IDX_ALIAS_ALL;
const BattleUnitIdxDef_IdxDef BattleUnitIdxDef::UNIT_IDX_ALIAS_HOME_TEAM;
const BattleUnitIdxDef_IdxDef BattleUnitIdxDef::UNIT_IDX_ALIAS_AWAY_TEAM;
const BattleUnitIdxDef_IdxDef BattleUnitIdxDef::UINT_IDX_HOME_BEGIN;
const BattleUnitIdxDef_IdxDef BattleUnitIdxDef::UNIT_IDX_AWAY_BEGIN;
const BattleUnitIdxDef_IdxDef BattleUnitIdxDef::IdxDef_MIN;
const BattleUnitIdxDef_IdxDef BattleUnitIdxDef::IdxDef_MAX;
const int BattleUnitIdxDef::IdxDef_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

BattleUnitIdxDef::BattleUnitIdxDef()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void BattleUnitIdxDef::InitAsDefaultInstance() {
}

BattleUnitIdxDef::BattleUnitIdxDef(const BattleUnitIdxDef& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void BattleUnitIdxDef::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleUnitIdxDef::~BattleUnitIdxDef() {
  SharedDtor();
}

void BattleUnitIdxDef::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void BattleUnitIdxDef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BattleUnitIdxDef& BattleUnitIdxDef::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_battlemsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_battlemsg_2eproto();
#endif
  return *default_instance_;
}

BattleUnitIdxDef* BattleUnitIdxDef::default_instance_ = NULL;

BattleUnitIdxDef* BattleUnitIdxDef::New() const {
  return new BattleUnitIdxDef;
}

void BattleUnitIdxDef::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool BattleUnitIdxDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
  return true;
#undef DO_
}

void BattleUnitIdxDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
}

int BattleUnitIdxDef::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleUnitIdxDef::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BattleUnitIdxDef*>(&from));
}

void BattleUnitIdxDef::MergeFrom(const BattleUnitIdxDef& from) {
  GOOGLE_CHECK_NE(&from, this);
}

void BattleUnitIdxDef::CopyFrom(const BattleUnitIdxDef& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleUnitIdxDef::IsInitialized() const {

  return true;
}

void BattleUnitIdxDef::Swap(BattleUnitIdxDef* other) {
  if (other != this) {
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BattleUnitIdxDef::GetTypeName() const {
  return "BattleUnitIdxDef";
}


// ===================================================================

bool BattleAction_BattleActionType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BattleAction_BattleActionType BattleAction::ACTION_DMG;
const BattleAction_BattleActionType BattleAction::ACTION_HEAL;
const BattleAction_BattleActionType BattleAction::ACTION_BUFF;
const BattleAction_BattleActionType BattleAction::ACTION_SKILL;
const BattleAction_BattleActionType BattleAction::BattleActionType_MIN;
const BattleAction_BattleActionType BattleAction::BattleActionType_MAX;
const int BattleAction::BattleActionType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BattleAction::kTypeFieldNumber;
const int BattleAction::kIdFieldNumber;
const int BattleAction::kSrcunitidxFieldNumber;
const int BattleAction::kDstunitidxesFieldNumber;
const int BattleAction::kParamsFieldNumber;
const int BattleAction::kSubactionsFieldNumber;
#endif  // !_MSC_VER

BattleAction::BattleAction()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void BattleAction::InitAsDefaultInstance() {
}

BattleAction::BattleAction(const BattleAction& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void BattleAction::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  id_ = 0;
  srcunitidx_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleAction::~BattleAction() {
  SharedDtor();
}

void BattleAction::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void BattleAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BattleAction& BattleAction::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_battlemsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_battlemsg_2eproto();
#endif
  return *default_instance_;
}

BattleAction* BattleAction::default_instance_ = NULL;

BattleAction* BattleAction::New() const {
  return new BattleAction;
}

void BattleAction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    id_ = 0;
    srcunitidx_ = 0;
  }
  dstunitidxes_.Clear();
  params_.Clear();
  subactions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool BattleAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .BattleAction.BattleActionType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BattleAction_BattleActionType_IsValid(value)) {
            set_type(static_cast< ::BattleAction_BattleActionType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_srcunitidx;
        break;
      }

      // optional int32 srcunitidx = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_srcunitidx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &srcunitidx_)));
          set_has_srcunitidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dstunitidxes;
        break;
      }

      // repeated int32 dstunitidxes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dstunitidxes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_dstunitidxes())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dstunitidxes())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dstunitidxes;
        if (input->ExpectTag(42)) goto parse_params;
        break;
      }

      // repeated bytes params = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_params()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_params;
        if (input->ExpectTag(50)) goto parse_subactions;
        break;
      }

      // repeated .BattleAction subactions = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subactions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subactions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_subactions;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .BattleAction.BattleActionType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional int32 srcunitidx = 3;
  if (has_srcunitidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->srcunitidx(), output);
  }

  // repeated int32 dstunitidxes = 4;
  for (int i = 0; i < this->dstunitidxes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->dstunitidxes(i), output);
  }

  // repeated bytes params = 5;
  for (int i = 0; i < this->params_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->params(i), output);
  }

  // repeated .BattleAction subactions = 6;
  for (int i = 0; i < this->subactions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->subactions(i), output);
  }

}

int BattleAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .BattleAction.BattleActionType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 srcunitidx = 3;
    if (has_srcunitidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->srcunitidx());
    }

  }
  // repeated int32 dstunitidxes = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->dstunitidxes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->dstunitidxes(i));
    }
    total_size += 1 * this->dstunitidxes_size() + data_size;
  }

  // repeated bytes params = 5;
  total_size += 1 * this->params_size();
  for (int i = 0; i < this->params_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->params(i));
  }

  // repeated .BattleAction subactions = 6;
  total_size += 1 * this->subactions_size();
  for (int i = 0; i < this->subactions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subactions(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleAction::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BattleAction*>(&from));
}

void BattleAction::MergeFrom(const BattleAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  dstunitidxes_.MergeFrom(from.dstunitidxes_);
  params_.MergeFrom(from.params_);
  subactions_.MergeFrom(from.subactions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_srcunitidx()) {
      set_srcunitidx(from.srcunitidx());
    }
  }
}

void BattleAction::CopyFrom(const BattleAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleAction::IsInitialized() const {

  return true;
}

void BattleAction::Swap(BattleAction* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(srcunitidx_, other->srcunitidx_);
    dstunitidxes_.Swap(&other->dstunitidxes_);
    params_.Swap(&other->params_);
    subactions_.Swap(&other->subactions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BattleAction::GetTypeName() const {
  return "BattleAction";
}


// ===================================================================

#ifndef _MSC_VER
const int BattleUnit::kIdxFieldNumber;
const int BattleUnit::kPosIdxFieldNumber;
const int BattleUnit::kRoleinfoFieldNumber;
#endif  // !_MSC_VER

BattleUnit::BattleUnit()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void BattleUnit::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  roleinfo_ = const_cast< ::Role*>(
      ::Role::internal_default_instance());
#else
  roleinfo_ = const_cast< ::Role*>(&::Role::default_instance());
#endif
}

BattleUnit::BattleUnit(const BattleUnit& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void BattleUnit::SharedCtor() {
  _cached_size_ = 0;
  idx_ = 0;
  posidx_ = 0;
  roleinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleUnit::~BattleUnit() {
  SharedDtor();
}

void BattleUnit::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete roleinfo_;
  }
}

void BattleUnit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BattleUnit& BattleUnit::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_battlemsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_battlemsg_2eproto();
#endif
  return *default_instance_;
}

BattleUnit* BattleUnit::default_instance_ = NULL;

BattleUnit* BattleUnit::New() const {
  return new BattleUnit;
}

void BattleUnit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    idx_ = 0;
    posidx_ = 0;
    if (has_roleinfo()) {
      if (roleinfo_ != NULL) roleinfo_->::Role::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool BattleUnit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 idx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &idx_)));
          set_has_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_posIdx;
        break;
      }

      // optional int32 posIdx = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posIdx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posidx_)));
          set_has_posidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_roleinfo;
        break;
      }

      // optional .Role roleinfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roleinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleUnit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 idx = 1;
  if (has_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->idx(), output);
  }

  // optional int32 posIdx = 2;
  if (has_posidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->posidx(), output);
  }

  // optional .Role roleinfo = 3;
  if (has_roleinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->roleinfo(), output);
  }

}

int BattleUnit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 idx = 1;
    if (has_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->idx());
    }

    // optional int32 posIdx = 2;
    if (has_posidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posidx());
    }

    // optional .Role roleinfo = 3;
    if (has_roleinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roleinfo());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleUnit::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BattleUnit*>(&from));
}

void BattleUnit::MergeFrom(const BattleUnit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_idx()) {
      set_idx(from.idx());
    }
    if (from.has_posidx()) {
      set_posidx(from.posidx());
    }
    if (from.has_roleinfo()) {
      mutable_roleinfo()->::Role::MergeFrom(from.roleinfo());
    }
  }
}

void BattleUnit::CopyFrom(const BattleUnit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleUnit::IsInitialized() const {

  return true;
}

void BattleUnit::Swap(BattleUnit* other) {
  if (other != this) {
    std::swap(idx_, other->idx_);
    std::swap(posidx_, other->posidx_);
    std::swap(roleinfo_, other->roleinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BattleUnit::GetTypeName() const {
  return "BattleUnit";
}


// ===================================================================

#ifndef _MSC_VER
const int BattleTeam::kUnitsFieldNumber;
#endif  // !_MSC_VER

BattleTeam::BattleTeam()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void BattleTeam::InitAsDefaultInstance() {
}

BattleTeam::BattleTeam(const BattleTeam& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void BattleTeam::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleTeam::~BattleTeam() {
  SharedDtor();
}

void BattleTeam::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void BattleTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BattleTeam& BattleTeam::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_battlemsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_battlemsg_2eproto();
#endif
  return *default_instance_;
}

BattleTeam* BattleTeam::default_instance_ = NULL;

BattleTeam* BattleTeam::New() const {
  return new BattleTeam;
}

void BattleTeam::Clear() {
  units_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool BattleTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .BattleUnit units = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_units:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_units()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_units;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .BattleUnit units = 1;
  for (int i = 0; i < this->units_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->units(i), output);
  }

}

int BattleTeam::ByteSize() const {
  int total_size = 0;

  // repeated .BattleUnit units = 1;
  total_size += 1 * this->units_size();
  for (int i = 0; i < this->units_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->units(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleTeam::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BattleTeam*>(&from));
}

void BattleTeam::MergeFrom(const BattleTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  units_.MergeFrom(from.units_);
}

void BattleTeam::CopyFrom(const BattleTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleTeam::IsInitialized() const {

  return true;
}

void BattleTeam::Swap(BattleTeam* other) {
  if (other != this) {
    units_.Swap(&other->units_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BattleTeam::GetTypeName() const {
  return "BattleTeam";
}


// ===================================================================

#ifndef _MSC_VER
const int BattleInitState::kHometeamFieldNumber;
const int BattleInitState::kAwayteamFieldNumber;
#endif  // !_MSC_VER

BattleInitState::BattleInitState()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void BattleInitState::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  hometeam_ = const_cast< ::BattleTeam*>(
      ::BattleTeam::internal_default_instance());
#else
  hometeam_ = const_cast< ::BattleTeam*>(&::BattleTeam::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  awayteam_ = const_cast< ::BattleTeam*>(
      ::BattleTeam::internal_default_instance());
#else
  awayteam_ = const_cast< ::BattleTeam*>(&::BattleTeam::default_instance());
#endif
}

BattleInitState::BattleInitState(const BattleInitState& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void BattleInitState::SharedCtor() {
  _cached_size_ = 0;
  hometeam_ = NULL;
  awayteam_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleInitState::~BattleInitState() {
  SharedDtor();
}

void BattleInitState::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete hometeam_;
    delete awayteam_;
  }
}

void BattleInitState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BattleInitState& BattleInitState::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_battlemsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_battlemsg_2eproto();
#endif
  return *default_instance_;
}

BattleInitState* BattleInitState::default_instance_ = NULL;

BattleInitState* BattleInitState::New() const {
  return new BattleInitState;
}

void BattleInitState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_hometeam()) {
      if (hometeam_ != NULL) hometeam_->::BattleTeam::Clear();
    }
    if (has_awayteam()) {
      if (awayteam_ != NULL) awayteam_->::BattleTeam::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool BattleInitState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .BattleTeam hometeam = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hometeam()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_awayteam;
        break;
      }

      // optional .BattleTeam awayteam = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_awayteam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_awayteam()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleInitState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .BattleTeam hometeam = 1;
  if (has_hometeam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->hometeam(), output);
  }

  // optional .BattleTeam awayteam = 2;
  if (has_awayteam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->awayteam(), output);
  }

}

int BattleInitState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .BattleTeam hometeam = 1;
    if (has_hometeam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hometeam());
    }

    // optional .BattleTeam awayteam = 2;
    if (has_awayteam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->awayteam());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleInitState::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BattleInitState*>(&from));
}

void BattleInitState::MergeFrom(const BattleInitState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hometeam()) {
      mutable_hometeam()->::BattleTeam::MergeFrom(from.hometeam());
    }
    if (from.has_awayteam()) {
      mutable_awayteam()->::BattleTeam::MergeFrom(from.awayteam());
    }
  }
}

void BattleInitState::CopyFrom(const BattleInitState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleInitState::IsInitialized() const {

  return true;
}

void BattleInitState::Swap(BattleInitState* other) {
  if (other != this) {
    std::swap(hometeam_, other->hometeam_);
    std::swap(awayteam_, other->awayteam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BattleInitState::GetTypeName() const {
  return "BattleInitState";
}


// ===================================================================

#ifndef _MSC_VER
const int BattleInitBuff::kHomebuffsFieldNumber;
const int BattleInitBuff::kAwaybuffsFieldNumber;
#endif  // !_MSC_VER

BattleInitBuff::BattleInitBuff()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void BattleInitBuff::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  homebuffs_ = const_cast< ::BattleAction*>(
      ::BattleAction::internal_default_instance());
#else
  homebuffs_ = const_cast< ::BattleAction*>(&::BattleAction::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  awaybuffs_ = const_cast< ::BattleAction*>(
      ::BattleAction::internal_default_instance());
#else
  awaybuffs_ = const_cast< ::BattleAction*>(&::BattleAction::default_instance());
#endif
}

BattleInitBuff::BattleInitBuff(const BattleInitBuff& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void BattleInitBuff::SharedCtor() {
  _cached_size_ = 0;
  homebuffs_ = NULL;
  awaybuffs_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleInitBuff::~BattleInitBuff() {
  SharedDtor();
}

void BattleInitBuff::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete homebuffs_;
    delete awaybuffs_;
  }
}

void BattleInitBuff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BattleInitBuff& BattleInitBuff::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_battlemsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_battlemsg_2eproto();
#endif
  return *default_instance_;
}

BattleInitBuff* BattleInitBuff::default_instance_ = NULL;

BattleInitBuff* BattleInitBuff::New() const {
  return new BattleInitBuff;
}

void BattleInitBuff::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_homebuffs()) {
      if (homebuffs_ != NULL) homebuffs_->::BattleAction::Clear();
    }
    if (has_awaybuffs()) {
      if (awaybuffs_ != NULL) awaybuffs_->::BattleAction::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool BattleInitBuff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .BattleAction homebuffs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_homebuffs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_awaybuffs;
        break;
      }

      // optional .BattleAction awaybuffs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_awaybuffs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_awaybuffs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleInitBuff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .BattleAction homebuffs = 1;
  if (has_homebuffs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->homebuffs(), output);
  }

  // optional .BattleAction awaybuffs = 2;
  if (has_awaybuffs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->awaybuffs(), output);
  }

}

int BattleInitBuff::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .BattleAction homebuffs = 1;
    if (has_homebuffs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->homebuffs());
    }

    // optional .BattleAction awaybuffs = 2;
    if (has_awaybuffs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->awaybuffs());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleInitBuff::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BattleInitBuff*>(&from));
}

void BattleInitBuff::MergeFrom(const BattleInitBuff& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_homebuffs()) {
      mutable_homebuffs()->::BattleAction::MergeFrom(from.homebuffs());
    }
    if (from.has_awaybuffs()) {
      mutable_awaybuffs()->::BattleAction::MergeFrom(from.awaybuffs());
    }
  }
}

void BattleInitBuff::CopyFrom(const BattleInitBuff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleInitBuff::IsInitialized() const {

  return true;
}

void BattleInitBuff::Swap(BattleInitBuff* other) {
  if (other != this) {
    std::swap(homebuffs_, other->homebuffs_);
    std::swap(awaybuffs_, other->awaybuffs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BattleInitBuff::GetTypeName() const {
  return "BattleInitBuff";
}


// ===================================================================

#ifndef _MSC_VER
const int BattleRound::kActionsFieldNumber;
#endif  // !_MSC_VER

BattleRound::BattleRound()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void BattleRound::InitAsDefaultInstance() {
}

BattleRound::BattleRound(const BattleRound& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void BattleRound::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleRound::~BattleRound() {
  SharedDtor();
}

void BattleRound::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void BattleRound::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BattleRound& BattleRound::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_battlemsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_battlemsg_2eproto();
#endif
  return *default_instance_;
}

BattleRound* BattleRound::default_instance_ = NULL;

BattleRound* BattleRound::New() const {
  return new BattleRound;
}

void BattleRound::Clear() {
  actions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool BattleRound::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .BattleAction actions = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_actions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_actions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_actions;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleRound::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .BattleAction actions = 1;
  for (int i = 0; i < this->actions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->actions(i), output);
  }

}

int BattleRound::ByteSize() const {
  int total_size = 0;

  // repeated .BattleAction actions = 1;
  total_size += 1 * this->actions_size();
  for (int i = 0; i < this->actions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->actions(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleRound::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BattleRound*>(&from));
}

void BattleRound::MergeFrom(const BattleRound& from) {
  GOOGLE_CHECK_NE(&from, this);
  actions_.MergeFrom(from.actions_);
}

void BattleRound::CopyFrom(const BattleRound& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleRound::IsInitialized() const {

  return true;
}

void BattleRound::Swap(BattleRound* other) {
  if (other != this) {
    actions_.Swap(&other->actions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BattleRound::GetTypeName() const {
  return "BattleRound";
}


// ===================================================================

#ifndef _MSC_VER
const int BattleDetail::kRoundsFieldNumber;
#endif  // !_MSC_VER

BattleDetail::BattleDetail()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void BattleDetail::InitAsDefaultInstance() {
}

BattleDetail::BattleDetail(const BattleDetail& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void BattleDetail::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleDetail::~BattleDetail() {
  SharedDtor();
}

void BattleDetail::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void BattleDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BattleDetail& BattleDetail::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_battlemsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_battlemsg_2eproto();
#endif
  return *default_instance_;
}

BattleDetail* BattleDetail::default_instance_ = NULL;

BattleDetail* BattleDetail::New() const {
  return new BattleDetail;
}

void BattleDetail::Clear() {
  rounds_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool BattleDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .BattleRound rounds = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rounds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rounds()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rounds;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .BattleRound rounds = 1;
  for (int i = 0; i < this->rounds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->rounds(i), output);
  }

}

int BattleDetail::ByteSize() const {
  int total_size = 0;

  // repeated .BattleRound rounds = 1;
  total_size += 1 * this->rounds_size();
  for (int i = 0; i < this->rounds_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rounds(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleDetail::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BattleDetail*>(&from));
}

void BattleDetail::MergeFrom(const BattleDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  rounds_.MergeFrom(from.rounds_);
}

void BattleDetail::CopyFrom(const BattleDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleDetail::IsInitialized() const {

  return true;
}

void BattleDetail::Swap(BattleDetail* other) {
  if (other != this) {
    rounds_.Swap(&other->rounds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BattleDetail::GetTypeName() const {
  return "BattleDetail";
}


// ===================================================================

#ifndef _MSC_VER
const int BattleResult::kWinFieldNumber;
#endif  // !_MSC_VER

BattleResult::BattleResult()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void BattleResult::InitAsDefaultInstance() {
}

BattleResult::BattleResult(const BattleResult& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void BattleResult::SharedCtor() {
  _cached_size_ = 0;
  win_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleResult::~BattleResult() {
  SharedDtor();
}

void BattleResult::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void BattleResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BattleResult& BattleResult::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_battlemsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_battlemsg_2eproto();
#endif
  return *default_instance_;
}

BattleResult* BattleResult::default_instance_ = NULL;

BattleResult* BattleResult::New() const {
  return new BattleResult;
}

void BattleResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    win_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool BattleResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 win = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_)));
          set_has_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 win = 1;
  if (has_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->win(), output);
  }

}

int BattleResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 win = 1;
    if (has_win()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleResult::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BattleResult*>(&from));
}

void BattleResult::MergeFrom(const BattleResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_win()) {
      set_win(from.win());
    }
  }
}

void BattleResult::CopyFrom(const BattleResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleResult::IsInitialized() const {

  return true;
}

void BattleResult::Swap(BattleResult* other) {
  if (other != this) {
    std::swap(win_, other->win_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BattleResult::GetTypeName() const {
  return "BattleResult";
}


// ===================================================================

#ifndef _MSC_VER
const int BattleRecord::kVersionFieldNumber;
const int BattleRecord::kTypeFieldNumber;
const int BattleRecord::kInitstateFieldNumber;
const int BattleRecord::kInitbuffFieldNumber;
const int BattleRecord::kDetailFieldNumber;
const int BattleRecord::kResultFieldNumber;
#endif  // !_MSC_VER

BattleRecord::BattleRecord()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void BattleRecord::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  initstate_ = const_cast< ::BattleInitState*>(
      ::BattleInitState::internal_default_instance());
#else
  initstate_ = const_cast< ::BattleInitState*>(&::BattleInitState::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  initbuff_ = const_cast< ::BattleInitBuff*>(
      ::BattleInitBuff::internal_default_instance());
#else
  initbuff_ = const_cast< ::BattleInitBuff*>(&::BattleInitBuff::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  detail_ = const_cast< ::BattleDetail*>(
      ::BattleDetail::internal_default_instance());
#else
  detail_ = const_cast< ::BattleDetail*>(&::BattleDetail::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  result_ = const_cast< ::BattleResult*>(
      ::BattleResult::internal_default_instance());
#else
  result_ = const_cast< ::BattleResult*>(&::BattleResult::default_instance());
#endif
}

BattleRecord::BattleRecord(const BattleRecord& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void BattleRecord::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  initstate_ = NULL;
  initbuff_ = NULL;
  detail_ = NULL;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleRecord::~BattleRecord() {
  SharedDtor();
}

void BattleRecord::SharedDtor() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete initstate_;
    delete initbuff_;
    delete detail_;
    delete result_;
  }
}

void BattleRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BattleRecord& BattleRecord::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_battlemsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_battlemsg_2eproto();
#endif
  return *default_instance_;
}

BattleRecord* BattleRecord::default_instance_ = NULL;

BattleRecord* BattleRecord::New() const {
  return new BattleRecord;
}

void BattleRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 0;
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    if (has_initstate()) {
      if (initstate_ != NULL) initstate_->::BattleInitState::Clear();
    }
    if (has_initbuff()) {
      if (initbuff_ != NULL) initbuff_->::BattleInitBuff::Clear();
    }
    if (has_detail()) {
      if (detail_ != NULL) detail_->::BattleDetail::Clear();
    }
    if (has_result()) {
      if (result_ != NULL) result_->::BattleResult::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool BattleRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // optional string type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_initstate;
        break;
      }

      // optional .BattleInitState initstate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_initstate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_initstate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_initbuff;
        break;
      }

      // optional .BattleInitBuff initbuff = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_initbuff:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_initbuff()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_detail;
        break;
      }

      // optional .BattleDetail detail = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_detail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_result;
        break;
      }

      // optional .BattleResult result = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->type(), output);
  }

  // optional .BattleInitState initstate = 3;
  if (has_initstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->initstate(), output);
  }

  // optional .BattleInitBuff initbuff = 4;
  if (has_initbuff()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->initbuff(), output);
  }

  // optional .BattleDetail detail = 5;
  if (has_detail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->detail(), output);
  }

  // optional .BattleResult result = 6;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->result(), output);
  }

}

int BattleRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // optional string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional .BattleInitState initstate = 3;
    if (has_initstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->initstate());
    }

    // optional .BattleInitBuff initbuff = 4;
    if (has_initbuff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->initbuff());
    }

    // optional .BattleDetail detail = 5;
    if (has_detail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->detail());
    }

    // optional .BattleResult result = 6;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleRecord::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BattleRecord*>(&from));
}

void BattleRecord::MergeFrom(const BattleRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_initstate()) {
      mutable_initstate()->::BattleInitState::MergeFrom(from.initstate());
    }
    if (from.has_initbuff()) {
      mutable_initbuff()->::BattleInitBuff::MergeFrom(from.initbuff());
    }
    if (from.has_detail()) {
      mutable_detail()->::BattleDetail::MergeFrom(from.detail());
    }
    if (from.has_result()) {
      mutable_result()->::BattleResult::MergeFrom(from.result());
    }
  }
}

void BattleRecord::CopyFrom(const BattleRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleRecord::IsInitialized() const {

  return true;
}

void BattleRecord::Swap(BattleRecord* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(type_, other->type_);
    std::swap(initstate_, other->initstate_);
    std::swap(initbuff_, other->initbuff_);
    std::swap(detail_, other->detail_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BattleRecord::GetTypeName() const {
  return "BattleRecord";
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
