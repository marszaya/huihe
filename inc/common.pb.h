// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef PROTOBUF_common_2eproto__INCLUDED
#define PROTOBUF_common_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "config.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_common_2eproto();
void protobuf_AssignDesc_common_2eproto();
void protobuf_ShutdownFile_common_2eproto();

class Experience;
class Identity;
class ParameterPair;

// ===================================================================

class Experience : public ::google::protobuf::MessageLite {
 public:
  Experience();
  virtual ~Experience();

  Experience(const Experience& from);

  inline Experience& operator=(const Experience& from) {
    CopyFrom(from);
    return *this;
  }

  static const Experience& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Experience* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Experience* other);

  // implements Message ----------------------------------------------

  Experience* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Experience& from);
  void MergeFrom(const Experience& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 expr = 1;
  inline bool has_expr() const;
  inline void clear_expr();
  static const int kExprFieldNumber = 1;
  inline ::google::protobuf::int64 expr() const;
  inline void set_expr(::google::protobuf::int64 value);

  // optional int32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int64 levelExpr = 3;
  inline bool has_levelexpr() const;
  inline void clear_levelexpr();
  static const int kLevelExprFieldNumber = 3;
  inline ::google::protobuf::int64 levelexpr() const;
  inline void set_levelexpr(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:Experience)
 private:
  inline void set_has_expr();
  inline void clear_has_expr();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_levelexpr();
  inline void clear_has_levelexpr();

  ::google::protobuf::int64 expr_;
  ::google::protobuf::int64 levelexpr_;
  ::google::protobuf::int32 level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_common_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_common_2eproto();
  #endif
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static Experience* default_instance_;
};
// -------------------------------------------------------------------

class Identity : public ::google::protobuf::MessageLite {
 public:
  Identity();
  virtual ~Identity();

  Identity(const Identity& from);

  inline Identity& operator=(const Identity& from) {
    CopyFrom(from);
    return *this;
  }

  static const Identity& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Identity* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Identity* other);

  // implements Message ----------------------------------------------

  Identity* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Identity& from);
  void MergeFrom(const Identity& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:Identity)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();

  ::std::string* id_;
  ::std::string* name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_common_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_common_2eproto();
  #endif
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static Identity* default_instance_;
};
// -------------------------------------------------------------------

class ParameterPair : public ::google::protobuf::MessageLite {
 public:
  ParameterPair();
  virtual ~ParameterPair();

  ParameterPair(const ParameterPair& from);

  inline ParameterPair& operator=(const ParameterPair& from) {
    CopyFrom(from);
    return *this;
  }

  static const ParameterPair& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ParameterPair* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ParameterPair* other);

  // implements Message ----------------------------------------------

  ParameterPair* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ParameterPair& from);
  void MergeFrom(const ParameterPair& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ConfigDefine.VAL_TYPE vtype = 1;
  inline bool has_vtype() const;
  inline void clear_vtype();
  static const int kVtypeFieldNumber = 1;
  inline ::ConfigDefine_VAL_TYPE vtype() const;
  inline void set_vtype(::ConfigDefine_VAL_TYPE value);

  // optional string val = 2;
  inline bool has_val() const;
  inline void clear_val();
  static const int kValFieldNumber = 2;
  inline const ::std::string& val() const;
  inline void set_val(const ::std::string& value);
  inline void set_val(const char* value);
  inline void set_val(const char* value, size_t size);
  inline ::std::string* mutable_val();
  inline ::std::string* release_val();
  inline void set_allocated_val(::std::string* val);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:ParameterPair)
 private:
  inline void set_has_vtype();
  inline void clear_has_vtype();
  inline void set_has_val();
  inline void clear_has_val();
  inline void set_has_name();
  inline void clear_has_name();

  ::std::string* val_;
  ::std::string* name_;
  int vtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_common_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_common_2eproto();
  #endif
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static ParameterPair* default_instance_;
};
// ===================================================================


// ===================================================================

// Experience

// optional int64 expr = 1;
inline bool Experience::has_expr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Experience::set_has_expr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Experience::clear_has_expr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Experience::clear_expr() {
  expr_ = GOOGLE_LONGLONG(0);
  clear_has_expr();
}
inline ::google::protobuf::int64 Experience::expr() const {
  return expr_;
}
inline void Experience::set_expr(::google::protobuf::int64 value) {
  set_has_expr();
  expr_ = value;
}

// optional int32 level = 2;
inline bool Experience::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Experience::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Experience::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Experience::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 Experience::level() const {
  return level_;
}
inline void Experience::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int64 levelExpr = 3;
inline bool Experience::has_levelexpr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Experience::set_has_levelexpr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Experience::clear_has_levelexpr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Experience::clear_levelexpr() {
  levelexpr_ = GOOGLE_LONGLONG(0);
  clear_has_levelexpr();
}
inline ::google::protobuf::int64 Experience::levelexpr() const {
  return levelexpr_;
}
inline void Experience::set_levelexpr(::google::protobuf::int64 value) {
  set_has_levelexpr();
  levelexpr_ = value;
}

// -------------------------------------------------------------------

// Identity

// optional string id = 1;
inline bool Identity::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Identity::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Identity::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Identity::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& Identity::id() const {
  return *id_;
}
inline void Identity::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void Identity::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void Identity::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Identity::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* Identity::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Identity::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string name = 2;
inline bool Identity::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Identity::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Identity::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Identity::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Identity::name() const {
  return *name_;
}
inline void Identity::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Identity::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Identity::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Identity::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Identity::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Identity::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ParameterPair

// optional .ConfigDefine.VAL_TYPE vtype = 1;
inline bool ParameterPair::has_vtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ParameterPair::set_has_vtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ParameterPair::clear_has_vtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ParameterPair::clear_vtype() {
  vtype_ = 1;
  clear_has_vtype();
}
inline ::ConfigDefine_VAL_TYPE ParameterPair::vtype() const {
  return static_cast< ::ConfigDefine_VAL_TYPE >(vtype_);
}
inline void ParameterPair::set_vtype(::ConfigDefine_VAL_TYPE value) {
  assert(::ConfigDefine_VAL_TYPE_IsValid(value));
  set_has_vtype();
  vtype_ = value;
}

// optional string val = 2;
inline bool ParameterPair::has_val() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ParameterPair::set_has_val() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ParameterPair::clear_has_val() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ParameterPair::clear_val() {
  if (val_ != &::google::protobuf::internal::kEmptyString) {
    val_->clear();
  }
  clear_has_val();
}
inline const ::std::string& ParameterPair::val() const {
  return *val_;
}
inline void ParameterPair::set_val(const ::std::string& value) {
  set_has_val();
  if (val_ == &::google::protobuf::internal::kEmptyString) {
    val_ = new ::std::string;
  }
  val_->assign(value);
}
inline void ParameterPair::set_val(const char* value) {
  set_has_val();
  if (val_ == &::google::protobuf::internal::kEmptyString) {
    val_ = new ::std::string;
  }
  val_->assign(value);
}
inline void ParameterPair::set_val(const char* value, size_t size) {
  set_has_val();
  if (val_ == &::google::protobuf::internal::kEmptyString) {
    val_ = new ::std::string;
  }
  val_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ParameterPair::mutable_val() {
  set_has_val();
  if (val_ == &::google::protobuf::internal::kEmptyString) {
    val_ = new ::std::string;
  }
  return val_;
}
inline ::std::string* ParameterPair::release_val() {
  clear_has_val();
  if (val_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = val_;
    val_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ParameterPair::set_allocated_val(::std::string* val) {
  if (val_ != &::google::protobuf::internal::kEmptyString) {
    delete val_;
  }
  if (val) {
    set_has_val();
    val_ = val;
  } else {
    clear_has_val();
    val_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string name = 3;
inline bool ParameterPair::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ParameterPair::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ParameterPair::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ParameterPair::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ParameterPair::name() const {
  return *name_;
}
inline void ParameterPair::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ParameterPair::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ParameterPair::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ParameterPair::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ParameterPair::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ParameterPair::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_common_2eproto__INCLUDED
