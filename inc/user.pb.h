// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user.proto

#ifndef PROTOBUF_user_2eproto__INCLUDED
#define PROTOBUF_user_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "common.pb.h"
#include "item.pb.h"
#include "role.pb.h"
#include "pve.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_user_2eproto();
void protobuf_AssignDesc_user_2eproto();
void protobuf_ShutdownFile_user_2eproto();

class Account;
class User;

// ===================================================================

class Account : public ::google::protobuf::MessageLite {
 public:
  Account();
  virtual ~Account();

  Account(const Account& from);

  inline Account& operator=(const Account& from) {
    CopyFrom(from);
    return *this;
  }

  static const Account& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Account* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Account* other);

  // implements Message ----------------------------------------------

  Account* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Account& from);
  void MergeFrom(const Account& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 gold = 2;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 2;
  inline ::google::protobuf::int64 gold() const;
  inline void set_gold(::google::protobuf::int64 value);

  // optional int64 money = 3;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 3;
  inline ::google::protobuf::int64 money() const;
  inline void set_money(::google::protobuf::int64 value);

  // optional .Experience expr = 4;
  inline bool has_expr() const;
  inline void clear_expr();
  static const int kExprFieldNumber = 4;
  inline const ::Experience& expr() const;
  inline ::Experience* mutable_expr();
  inline ::Experience* release_expr();
  inline void set_allocated_expr(::Experience* expr);

  // optional .Experience vip = 5;
  inline bool has_vip() const;
  inline void clear_vip();
  static const int kVipFieldNumber = 5;
  inline const ::Experience& vip() const;
  inline ::Experience* mutable_vip();
  inline ::Experience* release_vip();
  inline void set_allocated_vip(::Experience* vip);

  // @@protoc_insertion_point(class_scope:Account)
 private:
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_money();
  inline void clear_has_money();
  inline void set_has_expr();
  inline void clear_has_expr();
  inline void set_has_vip();
  inline void clear_has_vip();

  ::google::protobuf::int64 gold_;
  ::google::protobuf::int64 money_;
  ::Experience* expr_;
  ::Experience* vip_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_user_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_user_2eproto();
  #endif
  friend void protobuf_AssignDesc_user_2eproto();
  friend void protobuf_ShutdownFile_user_2eproto();

  void InitAsDefaultInstance();
  static Account* default_instance_;
};
// -------------------------------------------------------------------

class User : public ::google::protobuf::MessageLite {
 public:
  User();
  virtual ~User();

  User(const User& from);

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }

  static const User& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const User* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(User* other);

  // implements Message ----------------------------------------------

  User* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const User& from);
  void MergeFrom(const User& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Identity id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::Identity& id() const;
  inline ::Identity* mutable_id();
  inline ::Identity* release_id();
  inline void set_allocated_id(::Identity* id);

  // optional .Account account = 2;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 2;
  inline const ::Account& account() const;
  inline ::Account* mutable_account();
  inline ::Account* release_account();
  inline void set_allocated_account(::Account* account);

  // optional .RoleSet role = 3;
  inline bool has_role() const;
  inline void clear_role();
  static const int kRoleFieldNumber = 3;
  inline const ::RoleSet& role() const;
  inline ::RoleSet* mutable_role();
  inline ::RoleSet* release_role();
  inline void set_allocated_role(::RoleSet* role);

  // optional .ItemSet item = 4;
  inline bool has_item() const;
  inline void clear_item();
  static const int kItemFieldNumber = 4;
  inline const ::ItemSet& item() const;
  inline ::ItemSet* mutable_item();
  inline ::ItemSet* release_item();
  inline void set_allocated_item(::ItemSet* item);

  // optional .PveInfo pve = 5;
  inline bool has_pve() const;
  inline void clear_pve();
  static const int kPveFieldNumber = 5;
  inline const ::PveInfo& pve() const;
  inline ::PveInfo* mutable_pve();
  inline ::PveInfo* release_pve();
  inline void set_allocated_pve(::PveInfo* pve);

  // optional int32 version = 100;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 100;
  inline ::google::protobuf::int32 version() const;
  inline void set_version(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:User)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_role();
  inline void clear_has_role();
  inline void set_has_item();
  inline void clear_has_item();
  inline void set_has_pve();
  inline void clear_has_pve();
  inline void set_has_version();
  inline void clear_has_version();

  ::Identity* id_;
  ::Account* account_;
  ::RoleSet* role_;
  ::ItemSet* item_;
  ::PveInfo* pve_;
  ::google::protobuf::int32 version_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_user_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_user_2eproto();
  #endif
  friend void protobuf_AssignDesc_user_2eproto();
  friend void protobuf_ShutdownFile_user_2eproto();

  void InitAsDefaultInstance();
  static User* default_instance_;
};
// ===================================================================


// ===================================================================

// Account

// optional int64 gold = 2;
inline bool Account::has_gold() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Account::set_has_gold() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Account::clear_has_gold() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Account::clear_gold() {
  gold_ = GOOGLE_LONGLONG(0);
  clear_has_gold();
}
inline ::google::protobuf::int64 Account::gold() const {
  return gold_;
}
inline void Account::set_gold(::google::protobuf::int64 value) {
  set_has_gold();
  gold_ = value;
}

// optional int64 money = 3;
inline bool Account::has_money() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Account::set_has_money() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Account::clear_has_money() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Account::clear_money() {
  money_ = GOOGLE_LONGLONG(0);
  clear_has_money();
}
inline ::google::protobuf::int64 Account::money() const {
  return money_;
}
inline void Account::set_money(::google::protobuf::int64 value) {
  set_has_money();
  money_ = value;
}

// optional .Experience expr = 4;
inline bool Account::has_expr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Account::set_has_expr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Account::clear_has_expr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Account::clear_expr() {
  if (expr_ != NULL) expr_->::Experience::Clear();
  clear_has_expr();
}
inline const ::Experience& Account::expr() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return expr_ != NULL ? *expr_ : *default_instance().expr_;
#else
  return expr_ != NULL ? *expr_ : *default_instance_->expr_;
#endif
}
inline ::Experience* Account::mutable_expr() {
  set_has_expr();
  if (expr_ == NULL) expr_ = new ::Experience;
  return expr_;
}
inline ::Experience* Account::release_expr() {
  clear_has_expr();
  ::Experience* temp = expr_;
  expr_ = NULL;
  return temp;
}
inline void Account::set_allocated_expr(::Experience* expr) {
  delete expr_;
  expr_ = expr;
  if (expr) {
    set_has_expr();
  } else {
    clear_has_expr();
  }
}

// optional .Experience vip = 5;
inline bool Account::has_vip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Account::set_has_vip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Account::clear_has_vip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Account::clear_vip() {
  if (vip_ != NULL) vip_->::Experience::Clear();
  clear_has_vip();
}
inline const ::Experience& Account::vip() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return vip_ != NULL ? *vip_ : *default_instance().vip_;
#else
  return vip_ != NULL ? *vip_ : *default_instance_->vip_;
#endif
}
inline ::Experience* Account::mutable_vip() {
  set_has_vip();
  if (vip_ == NULL) vip_ = new ::Experience;
  return vip_;
}
inline ::Experience* Account::release_vip() {
  clear_has_vip();
  ::Experience* temp = vip_;
  vip_ = NULL;
  return temp;
}
inline void Account::set_allocated_vip(::Experience* vip) {
  delete vip_;
  vip_ = vip;
  if (vip) {
    set_has_vip();
  } else {
    clear_has_vip();
  }
}

// -------------------------------------------------------------------

// User

// optional .Identity id = 1;
inline bool User::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void User::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void User::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void User::clear_id() {
  if (id_ != NULL) id_->::Identity::Clear();
  clear_has_id();
}
inline const ::Identity& User::id() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return id_ != NULL ? *id_ : *default_instance().id_;
#else
  return id_ != NULL ? *id_ : *default_instance_->id_;
#endif
}
inline ::Identity* User::mutable_id() {
  set_has_id();
  if (id_ == NULL) id_ = new ::Identity;
  return id_;
}
inline ::Identity* User::release_id() {
  clear_has_id();
  ::Identity* temp = id_;
  id_ = NULL;
  return temp;
}
inline void User::set_allocated_id(::Identity* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
}

// optional .Account account = 2;
inline bool User::has_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void User::set_has_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void User::clear_has_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void User::clear_account() {
  if (account_ != NULL) account_->::Account::Clear();
  clear_has_account();
}
inline const ::Account& User::account() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return account_ != NULL ? *account_ : *default_instance().account_;
#else
  return account_ != NULL ? *account_ : *default_instance_->account_;
#endif
}
inline ::Account* User::mutable_account() {
  set_has_account();
  if (account_ == NULL) account_ = new ::Account;
  return account_;
}
inline ::Account* User::release_account() {
  clear_has_account();
  ::Account* temp = account_;
  account_ = NULL;
  return temp;
}
inline void User::set_allocated_account(::Account* account) {
  delete account_;
  account_ = account;
  if (account) {
    set_has_account();
  } else {
    clear_has_account();
  }
}

// optional .RoleSet role = 3;
inline bool User::has_role() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void User::set_has_role() {
  _has_bits_[0] |= 0x00000004u;
}
inline void User::clear_has_role() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void User::clear_role() {
  if (role_ != NULL) role_->::RoleSet::Clear();
  clear_has_role();
}
inline const ::RoleSet& User::role() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return role_ != NULL ? *role_ : *default_instance().role_;
#else
  return role_ != NULL ? *role_ : *default_instance_->role_;
#endif
}
inline ::RoleSet* User::mutable_role() {
  set_has_role();
  if (role_ == NULL) role_ = new ::RoleSet;
  return role_;
}
inline ::RoleSet* User::release_role() {
  clear_has_role();
  ::RoleSet* temp = role_;
  role_ = NULL;
  return temp;
}
inline void User::set_allocated_role(::RoleSet* role) {
  delete role_;
  role_ = role;
  if (role) {
    set_has_role();
  } else {
    clear_has_role();
  }
}

// optional .ItemSet item = 4;
inline bool User::has_item() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void User::set_has_item() {
  _has_bits_[0] |= 0x00000008u;
}
inline void User::clear_has_item() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void User::clear_item() {
  if (item_ != NULL) item_->::ItemSet::Clear();
  clear_has_item();
}
inline const ::ItemSet& User::item() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return item_ != NULL ? *item_ : *default_instance().item_;
#else
  return item_ != NULL ? *item_ : *default_instance_->item_;
#endif
}
inline ::ItemSet* User::mutable_item() {
  set_has_item();
  if (item_ == NULL) item_ = new ::ItemSet;
  return item_;
}
inline ::ItemSet* User::release_item() {
  clear_has_item();
  ::ItemSet* temp = item_;
  item_ = NULL;
  return temp;
}
inline void User::set_allocated_item(::ItemSet* item) {
  delete item_;
  item_ = item;
  if (item) {
    set_has_item();
  } else {
    clear_has_item();
  }
}

// optional .PveInfo pve = 5;
inline bool User::has_pve() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void User::set_has_pve() {
  _has_bits_[0] |= 0x00000010u;
}
inline void User::clear_has_pve() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void User::clear_pve() {
  if (pve_ != NULL) pve_->::PveInfo::Clear();
  clear_has_pve();
}
inline const ::PveInfo& User::pve() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return pve_ != NULL ? *pve_ : *default_instance().pve_;
#else
  return pve_ != NULL ? *pve_ : *default_instance_->pve_;
#endif
}
inline ::PveInfo* User::mutable_pve() {
  set_has_pve();
  if (pve_ == NULL) pve_ = new ::PveInfo;
  return pve_;
}
inline ::PveInfo* User::release_pve() {
  clear_has_pve();
  ::PveInfo* temp = pve_;
  pve_ = NULL;
  return temp;
}
inline void User::set_allocated_pve(::PveInfo* pve) {
  delete pve_;
  pve_ = pve;
  if (pve) {
    set_has_pve();
  } else {
    clear_has_pve();
  }
}

// optional int32 version = 100;
inline bool User::has_version() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void User::set_has_version() {
  _has_bits_[0] |= 0x00000020u;
}
inline void User::clear_has_version() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void User::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 User::version() const {
  return version_;
}
inline void User::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_user_2eproto__INCLUDED
